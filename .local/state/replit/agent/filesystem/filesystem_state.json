{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# OJC Graduate Profile Badges System\n\n## Overview\n\nA comprehensive student badge management system for OJC (Otago Junior College) that allows students to browse, apply for, and track their progress toward earning Graduate Profile Badges. The system supports six graduate profile categories (Excellence, Innovation, Integrity, Inspiration, Hauora, and Relationships) with multiple badge levels and evidence submission capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation via @hookform/resolvers\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ESM modules\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **File Uploads**: Multer middleware for handling evidence file uploads\n- **Session Management**: Express sessions with PostgreSQL session store\n\n### Database Schema\nThe system uses PostgreSQL with the following core entities:\n- **Users**: Student and teacher accounts with role-based access\n- **Badges**: Badge definitions organized by graduate profile categories\n- **Badge Applications**: Student applications for specific badges\n- **Evidence**: File uploads and submissions linked to applications\n\nKey relationships:\n- Users can have multiple badge applications\n- Each application belongs to one badge and contains multiple evidence items\n- Badges are categorized by graduate profile (excellence, innovation, etc.)\n\n### Authentication and Authorization\n- Basic username/password authentication\n- Role-based access control (student, teacher, admin)\n- Session-based authentication with secure cookie storage\n\n### File Management\n- Local file storage system for evidence uploads\n- Support for multiple file types (images, videos, documents)\n- 10MB file size limit with type validation\n- Organized file storage in dedicated uploads directory\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting (@neondatabase/serverless)\n- **WebSocket Support**: Node.js ws package for Neon connection handling\n\n### UI and Design System\n- **Radix UI**: Comprehensive primitive components for accessibility\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Type-safe variant API for component styling\n\n### Development Tools\n- **Vite**: Fast build tool and development server\n- **TSX**: TypeScript execution environment for development\n- **ESBuild**: JavaScript bundler for production builds\n- **Replit Integration**: Development environment plugins and runtime error handling\n\n### Form and Data Handling\n- **React Hook Form**: Performant form library with validation\n- **Zod**: TypeScript-first schema validation\n- **Date-fns**: Modern date utility library\n- **Drizzle-Zod**: Integration between Drizzle ORM and Zod validation\n\nThe architecture follows a full-stack TypeScript approach with shared schema definitions between frontend and backend, enabling type safety across the entire application.","size_bytes":3487},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2991},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import express, { type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertBadgeSchema, insertBadgeApplicationSchema, insertEvidenceSchema } from \"@shared/schema\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  dest: uploadDir,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Accept images, videos, and documents\n    const allowedTypes = /jpeg|jpg|png|gif|mp4|mov|avi|pdf|doc|docx|txt/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    \n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('Only images, videos, and documents are allowed'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // In a real app, you'd use proper session management here\n      res.json({ user: { ...user, password: undefined } });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(userData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(userData.email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createUser(userData);\n      res.status(201).json({ user: { ...user, password: undefined } });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ ...user, password: undefined });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/:id/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getUserStats(req.params.id);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/:id/progress\", async (req, res) => {\n    try {\n      const progress = await storage.getGraduateProfileProgress(req.params.id);\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Badge routes\n  app.get(\"/api/badges\", async (req, res) => {\n    try {\n      const { graduateProfile } = req.query;\n      let badges;\n      \n      if (graduateProfile && typeof graduateProfile === 'string') {\n        badges = await storage.getBadgesByGraduateProfile(graduateProfile as any);\n      } else {\n        badges = await storage.getAllBadges();\n      }\n      \n      res.json(badges);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/badges/:id\", async (req, res) => {\n    try {\n      const badge = await storage.getBadge(req.params.id);\n      if (!badge) {\n        return res.status(404).json({ message: \"Badge not found\" });\n      }\n      res.json(badge);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/badges\", async (req, res) => {\n    try {\n      const badgeData = insertBadgeSchema.parse(req.body);\n      const badge = await storage.createBadge(badgeData);\n      res.status(201).json(badge);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid badge data\" });\n    }\n  });\n\n  // Badge Application routes\n  app.get(\"/api/users/:userId/applications\", async (req, res) => {\n    try {\n      const applications = await storage.getUserApplications(req.params.userId);\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/applications/:id\", async (req, res) => {\n    try {\n      const application = await storage.getApplication(req.params.id);\n      if (!application) {\n        return res.status(404).json({ message: \"Application not found\" });\n      }\n      res.json(application);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/applications\", async (req, res) => {\n    try {\n      const applicationData = insertBadgeApplicationSchema.parse(req.body);\n      const application = await storage.createApplication(applicationData);\n      res.status(201).json(application);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid application data\" });\n    }\n  });\n\n  app.patch(\"/api/applications/:id/status\", async (req, res) => {\n    try {\n      const { status, reviewedBy, feedback } = req.body;\n      const application = await storage.updateApplicationStatus(\n        req.params.id,\n        status,\n        reviewedBy,\n        feedback\n      );\n      if (!application) {\n        return res.status(404).json({ message: \"Application not found\" });\n      }\n      res.json(application);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid status update\" });\n    }\n  });\n\n  app.get(\"/api/applications/review\", async (req, res) => {\n    try {\n      const applications = await storage.getApplicationsForReview();\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Evidence routes\n  app.get(\"/api/applications/:applicationId/evidence\", async (req, res) => {\n    try {\n      const evidence = await storage.getApplicationEvidence(req.params.applicationId);\n      res.json(evidence);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/evidence\", upload.single('file'), async (req, res) => {\n    try {\n      const evidenceData = {\n        ...req.body,\n        metadata: req.file ? {\n          originalName: req.file.originalname,\n          size: req.file.size,\n          mimetype: req.file.mimetype\n        } : null,\n        fileUrl: req.file ? `/uploads/${req.file.filename}` : null\n      };\n      \n      const validatedData = insertEvidenceSchema.parse(evidenceData);\n      const evidence = await storage.createEvidence(validatedData);\n      res.status(201).json(evidence);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid evidence data\" });\n    }\n  });\n\n  app.delete(\"/api/evidence/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteEvidence(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Evidence not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Slide generation routes\n  app.post(\"/api/slides/generate\", async (req, res) => {\n    try {\n      const { badgeId, badgeName, graduateProfile, evidence, reflections } = req.body;\n      \n      // Get badge details\n      const badge = await storage.getBadge(badgeId);\n      if (!badge) {\n        return res.status(404).json({ message: \"Badge not found\" });\n      }\n\n      // Generate slide content\n      const slideData = {\n        badgeId,\n        badgeName,\n        graduateProfile,\n        badge,\n        evidence,\n        reflections,\n        generatedAt: new Date().toISOString(),\n        downloadUrl: `/api/slides/download/${badgeId}`,\n        viewUrl: `/api/slides/view/${badgeId}`,\n        shareUrl: `/api/slides/share/${badgeId}`\n      };\n\n      // In a real implementation, you would use PptxGenJS here\n      // For now, we'll return the slide data structure\n      res.json(slideData);\n    } catch (error) {\n      res.status(500).json({ message: \"Error generating slides\" });\n    }\n  });\n\n  app.get(\"/api/slides/download/:badgeId\", async (req, res) => {\n    try {\n      // In a real implementation, this would generate and serve the PPTX file\n      res.json({ message: \"Download functionality would be implemented here\", badgeId: req.params.badgeId });\n    } catch (error) {\n      res.status(500).json({ message: \"Error downloading slides\" });\n    }\n  });\n\n  app.get(\"/api/slides/view/:badgeId\", async (req, res) => {\n    try {\n      // In a real implementation, this would serve an HTML presentation\n      res.json({ message: \"View functionality would be implemented here\", badgeId: req.params.badgeId });\n    } catch (error) {\n      res.status(500).json({ message: \"Error viewing slides\" });\n    }\n  });\n\n  app.get(\"/api/slides/share/:badgeId\", async (req, res) => {\n    try {\n      // In a real implementation, this would provide sharing functionality\n      res.json({ message: \"Share functionality would be implemented here\", badgeId: req.params.badgeId });\n    } catch (error) {\n      res.status(500).json({ message: \"Error sharing slides\" });\n    }\n  });\n\n  // Serve uploaded files\n  app.use('/uploads', express.static(uploadDir));\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10060},"server/storage.ts":{"content":"import {\n  users,\n  badges,\n  badgeApplications,\n  evidence,\n  type User,\n  type InsertUser,\n  type Badge,\n  type InsertBadge,\n  type BadgeApplication,\n  type InsertBadgeApplication,\n  type Evidence,\n  type InsertEvidence,\n  type GraduateProfile,\n  type BadgeStatus\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, count, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Badge methods\n  getAllBadges(): Promise<Badge[]>;\n  getBadgesByGraduateProfile(profile: GraduateProfile): Promise<Badge[]>;\n  getBadge(id: string): Promise<Badge | undefined>;\n  createBadge(badge: InsertBadge): Promise<Badge>;\n  updateBadge(id: string, badge: Partial<InsertBadge>): Promise<Badge | undefined>;\n\n  // Badge Application methods\n  getUserApplications(userId: string): Promise<(BadgeApplication & { badge: Badge; evidence: Evidence[] })[]>;\n  getApplication(id: string): Promise<(BadgeApplication & { badge: Badge; user: User; evidence: Evidence[] }) | undefined>;\n  createApplication(application: InsertBadgeApplication): Promise<BadgeApplication>;\n  updateApplicationStatus(id: string, status: BadgeStatus, reviewedBy?: string, feedback?: string): Promise<BadgeApplication | undefined>;\n  getApplicationsForReview(): Promise<(BadgeApplication & { badge: Badge; user: User })[]>;\n\n  // Evidence methods\n  getApplicationEvidence(applicationId: string): Promise<Evidence[]>;\n  createEvidence(evidence: InsertEvidence): Promise<Evidence>;\n  deleteEvidence(id: string): Promise<boolean>;\n\n  // Stats methods\n  getUserStats(userId: string): Promise<{\n    earnedBadges: number;\n    inProgress: number;\n    totalBadges: number;\n    completionRate: number;\n  }>;\n  getGraduateProfileProgress(userId: string): Promise<{\n    profile: GraduateProfile;\n    earnedCount: number;\n    totalCount: number;\n    percentage: number;\n  }[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async getAllBadges(): Promise<Badge[]> {\n    return await db.select().from(badges).where(eq(badges.isActive, true)).orderBy(badges.graduateProfile, badges.level);\n  }\n\n  async getBadgesByGraduateProfile(profile: GraduateProfile): Promise<Badge[]> {\n    return await db.select().from(badges)\n      .where(and(eq(badges.graduateProfile, profile), eq(badges.isActive, true)))\n      .orderBy(badges.level);\n  }\n\n  async getBadge(id: string): Promise<Badge | undefined> {\n    const [badge] = await db.select().from(badges).where(eq(badges.id, id));\n    return badge || undefined;\n  }\n\n  async createBadge(badge: InsertBadge): Promise<Badge> {\n    const [newBadge] = await db.insert(badges).values(badge).returning();\n    return newBadge;\n  }\n\n  async updateBadge(id: string, badge: Partial<InsertBadge>): Promise<Badge | undefined> {\n    const [updatedBadge] = await db.update(badges).set(badge).where(eq(badges.id, id)).returning();\n    return updatedBadge || undefined;\n  }\n\n  async getUserApplications(userId: string): Promise<(BadgeApplication & { badge: Badge; evidence: Evidence[] })[]> {\n    const applications = await db.select()\n      .from(badgeApplications)\n      .leftJoin(badges, eq(badgeApplications.badgeId, badges.id))\n      .leftJoin(evidence, eq(badgeApplications.id, evidence.applicationId))\n      .where(eq(badgeApplications.userId, userId))\n      .orderBy(desc(badgeApplications.createdAt));\n\n    const groupedApplications = applications.reduce((acc, row) => {\n      const appId = row.badge_applications.id;\n      if (!acc[appId]) {\n        acc[appId] = {\n          ...row.badge_applications,\n          badge: row.badges!,\n          evidence: []\n        };\n      }\n      if (row.evidence) {\n        acc[appId].evidence.push(row.evidence);\n      }\n      return acc;\n    }, {} as Record<string, BadgeApplication & { badge: Badge; evidence: Evidence[] }>);\n\n    return Object.values(groupedApplications);\n  }\n\n  async getApplication(id: string): Promise<(BadgeApplication & { badge: Badge; user: User; evidence: Evidence[] }) | undefined> {\n    const applicationData = await db.select()\n      .from(badgeApplications)\n      .leftJoin(badges, eq(badgeApplications.badgeId, badges.id))\n      .leftJoin(users, eq(badgeApplications.userId, users.id))\n      .leftJoin(evidence, eq(badgeApplications.id, evidence.applicationId))\n      .where(eq(badgeApplications.id, id));\n\n    if (applicationData.length === 0) return undefined;\n\n    const application = applicationData[0].badge_applications;\n    const badge = applicationData[0].badges!;\n    const user = applicationData[0].users!;\n    const evidenceList = applicationData.filter(row => row.evidence).map(row => row.evidence!);\n\n    return {\n      ...application,\n      badge,\n      user,\n      evidence: evidenceList\n    };\n  }\n\n  async createApplication(application: InsertBadgeApplication): Promise<BadgeApplication> {\n    const [newApplication] = await db.insert(badgeApplications).values(application).returning();\n    return newApplication;\n  }\n\n  async updateApplicationStatus(id: string, status: BadgeStatus, reviewedBy?: string, feedback?: string): Promise<BadgeApplication | undefined> {\n    const updateData: any = { status };\n    if (status === 'submitted') {\n      updateData.submittedAt = new Date();\n    }\n    if (status === 'earned' || status === 'rejected') {\n      updateData.reviewedAt = new Date();\n      updateData.reviewedBy = reviewedBy;\n      updateData.feedback = feedback;\n    }\n\n    const [updatedApplication] = await db.update(badgeApplications)\n      .set(updateData)\n      .where(eq(badgeApplications.id, id))\n      .returning();\n    return updatedApplication || undefined;\n  }\n\n  async getApplicationsForReview(): Promise<(BadgeApplication & { badge: Badge; user: User })[]> {\n    const applications = await db.select()\n      .from(badgeApplications)\n      .leftJoin(badges, eq(badgeApplications.badgeId, badges.id))\n      .leftJoin(users, eq(badgeApplications.userId, users.id))\n      .where(eq(badgeApplications.status, 'submitted'))\n      .orderBy(desc(badgeApplications.submittedAt));\n\n    return applications.map(row => ({\n      ...row.badge_applications,\n      badge: row.badges!,\n      user: row.users!\n    }));\n  }\n\n  async getApplicationEvidence(applicationId: string): Promise<Evidence[]> {\n    return await db.select().from(evidence)\n      .where(eq(evidence.applicationId, applicationId))\n      .orderBy(desc(evidence.createdAt));\n  }\n\n  async createEvidence(evidenceData: InsertEvidence): Promise<Evidence> {\n    const [newEvidence] = await db.insert(evidence).values(evidenceData).returning();\n    return newEvidence;\n  }\n\n  async deleteEvidence(id: string): Promise<boolean> {\n    const result = await db.delete(evidence).where(eq(evidence.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getUserStats(userId: string): Promise<{\n    earnedBadges: number;\n    inProgress: number;\n    totalBadges: number;\n    completionRate: number;\n  }> {\n    const [earnedResult] = await db.select({ count: count() })\n      .from(badgeApplications)\n      .where(and(eq(badgeApplications.userId, userId), eq(badgeApplications.status, 'earned')));\n\n    const [inProgressResult] = await db.select({ count: count() })\n      .from(badgeApplications)\n      .where(and(\n        eq(badgeApplications.userId, userId),\n        sql`${badgeApplications.status} IN ('in_progress', 'submitted', 'in_review')`\n      ));\n\n    const [totalResult] = await db.select({ count: count() })\n      .from(badges)\n      .where(eq(badges.isActive, true));\n\n    const earnedBadges = earnedResult.count;\n    const inProgress = inProgressResult.count;\n    const totalBadges = totalResult.count;\n    const completionRate = totalBadges > 0 ? Math.round((earnedBadges / totalBadges) * 100) : 0;\n\n    return {\n      earnedBadges,\n      inProgress,\n      totalBadges,\n      completionRate\n    };\n  }\n\n  async getGraduateProfileProgress(userId: string): Promise<{\n    profile: GraduateProfile;\n    earnedCount: number;\n    totalCount: number;\n    percentage: number;\n  }[]> {\n    const profiles: GraduateProfile[] = ['excellence', 'innovation', 'integrity', 'inspiration', 'hauora', 'relationships'];\n    const result = [];\n\n    for (const profile of profiles) {\n      const [earnedResult] = await db.select({ count: count() })\n        .from(badgeApplications)\n        .leftJoin(badges, eq(badgeApplications.badgeId, badges.id))\n        .where(and(\n          eq(badgeApplications.userId, userId),\n          eq(badgeApplications.status, 'earned'),\n          eq(badges.graduateProfile, profile)\n        ));\n\n      const [totalResult] = await db.select({ count: count() })\n        .from(badges)\n        .where(and(eq(badges.graduateProfile, profile), eq(badges.isActive, true)));\n\n      const earnedCount = earnedResult.count;\n      const totalCount = totalResult.count;\n      const percentage = totalCount > 0 ? Math.round((earnedCount / totalCount) * 100) : 0;\n\n      result.push({\n        profile,\n        earnedCount,\n        totalCount,\n        percentage\n      });\n    }\n\n    return result;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9972},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, pgEnum, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const graduateProfileEnum = pgEnum('graduate_profile', [\n  'excellence',\n  'innovation', \n  'integrity',\n  'inspiration',\n  'hauora',\n  'relationships'\n]);\n\nexport const badgeStatusEnum = pgEnum('badge_status', [\n  'not_started',\n  'in_progress',\n  'submitted',\n  'in_review',\n  'earned',\n  'rejected'\n]);\n\nexport const evidenceTypeEnum = pgEnum('evidence_type', [\n  'written_reflection',\n  'file_upload',\n  'project_link',\n  'video_submission'\n]);\n\nexport const userRoleEnum = pgEnum('user_role', [\n  'student',\n  'teacher',\n  'admin'\n]);\n\n// Tables\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('student'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull()\n});\n\nexport const badges = pgTable(\"badges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  criteria: text(\"criteria\").notNull(),\n  graduateProfile: graduateProfileEnum(\"graduate_profile\").notNull(),\n  level: integer(\"level\").notNull(), // 1, 2, 3 for different difficulty levels\n  requiredEvidenceCount: integer(\"required_evidence_count\").notNull().default(3),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull()\n});\n\nexport const badgeApplications = pgTable(\"badge_applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  badgeId: varchar(\"badge_id\").notNull().references(() => badges.id),\n  status: badgeStatusEnum(\"status\").notNull().default('not_started'),\n  submittedAt: timestamp(\"submitted_at\"),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  feedback: text(\"feedback\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull()\n});\n\nexport const evidence = pgTable(\"evidence\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  applicationId: varchar(\"application_id\").notNull().references(() => badgeApplications.id),\n  type: evidenceTypeEnum(\"type\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  content: text(\"content\"), // For written reflections\n  fileUrl: text(\"file_url\"), // For file uploads\n  metadata: jsonb(\"metadata\"), // Additional data like file size, type, etc.\n  createdAt: timestamp(\"created_at\").defaultNow().notNull()\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  applications: many(badgeApplications),\n  reviewedApplications: many(badgeApplications, { relationName: \"reviewer\" })\n}));\n\nexport const badgesRelations = relations(badges, ({ many }) => ({\n  applications: many(badgeApplications)\n}));\n\nexport const badgeApplicationsRelations = relations(badgeApplications, ({ one, many }) => ({\n  user: one(users, {\n    fields: [badgeApplications.userId],\n    references: [users.id]\n  }),\n  badge: one(badges, {\n    fields: [badgeApplications.badgeId],\n    references: [badges.id]\n  }),\n  reviewer: one(users, {\n    fields: [badgeApplications.reviewedBy],\n    references: [users.id],\n    relationName: \"reviewer\"\n  }),\n  evidence: many(evidence)\n}));\n\nexport const evidenceRelations = relations(evidence, ({ one }) => ({\n  application: one(badgeApplications, {\n    fields: [evidence.applicationId],\n    references: [badgeApplications.id]\n  })\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertBadgeSchema = createInsertSchema(badges).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertBadgeApplicationSchema = createInsertSchema(badgeApplications).omit({\n  id: true,\n  createdAt: true,\n  submittedAt: true,\n  reviewedAt: true\n});\n\nexport const insertEvidenceSchema = createInsertSchema(evidence).omit({\n  id: true,\n  createdAt: true\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Badge = typeof badges.$inferSelect;\nexport type InsertBadge = z.infer<typeof insertBadgeSchema>;\n\nexport type BadgeApplication = typeof badgeApplications.$inferSelect;\nexport type InsertBadgeApplication = z.infer<typeof insertBadgeApplicationSchema>;\n\nexport type Evidence = typeof evidence.$inferSelect;\nexport type InsertEvidence = z.infer<typeof insertEvidenceSchema>;\n\nexport type GraduateProfile = typeof graduateProfileEnum.enumValues[number];\nexport type BadgeStatus = typeof badgeStatusEnum.enumValues[number];\nexport type EvidenceType = typeof evidenceTypeEnum.enumValues[number];\nexport type UserRole = typeof userRoleEnum.enumValues[number];\n","size_bytes":5240},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport BadgeCatalog from \"@/pages/badge-catalog\";\nimport Evidence from \"@/pages/evidence\";\nimport Progress from \"@/pages/progress\";\nimport Profile from \"@/pages/profile\";\nimport BadgeBuilder from \"@/pages/badge-builder\";\nimport NotFound from \"@/pages/not-found\";\nimport Sidebar from \"@/components/layout/sidebar\";\n\nfunction Router() {\n  return (\n    <div className=\"flex min-h-screen\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-hidden\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/badges\" component={BadgeCatalog} />\n          <Route path=\"/evidence\" component={Evidence} />\n          <Route path=\"/progress\" component={Progress} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/badge-builder\" component={BadgeBuilder} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1432},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(45.4, 93.4%, 47.5%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --success: hsl(142.1, 76.2%, 36.3%);\n  --success-foreground: hsl(355.7, 100%, 97.3%);\n  --warning: hsl(32.6, 94.6%, 43.7%);\n  --warning-foreground: hsl(355.7, 100%, 97.3%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', system-ui, sans-serif;\n  \n  /* Badge colors */\n  --excellence-color: hsl(45.4, 93.4%, 47.5%);\n  --innovation-color: hsl(197, 71%, 73%);\n  --integrity-color: hsl(142.1, 76.2%, 36.3%);\n  --inspiration-color: hsl(280, 91%, 51%);\n  --hauora-color: hsl(25, 95%, 53%);\n  --relationships-color: hsl(346, 87%, 43%);\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer utilities {\n  .graduate-profile-excellence {\n    @apply bg-yellow-500 text-yellow-50;\n  }\n  \n  .graduate-profile-innovation {\n    @apply bg-cyan-500 text-cyan-50;\n  }\n  \n  .graduate-profile-integrity {\n    @apply bg-green-600 text-green-50;\n  }\n  \n  .graduate-profile-inspiration {\n    @apply bg-purple-600 text-purple-50;\n  }\n  \n  .graduate-profile-hauora {\n    @apply bg-orange-500 text-orange-50;\n  }\n  \n  .graduate-profile-relationships {\n    @apply bg-rose-600 text-rose-50;\n  }\n}\n","size_bytes":2531},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/badge-builder.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge, InsertEvidence } from \"@shared/schema\";\nimport { GRADUATE_PROFILE_LABELS, GRADUATE_PROFILE_ICONS } from \"@/types\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface EvidenceItem {\n  id: string;\n  type: 'photos' | 'reflections' | 'interviews' | 'iterations' | 'prototypes' | 'videos' | 'awards' | 'charts' | 'work' | 'audio' | 'mistakes' | 'process' | 'witnesses' | 'feedback' | 'other';\n  title: string;\n  description: string;\n  file?: File;\n  fileUrl?: string;\n  source?: 'MAC' | 'LIT' | 'NUM' | 'TAIP' | 'WO' | 'Clubs' | 'Outside OJC';\n}\n\ninterface SlideData {\n  badgeId: string;\n  badgeName: string;\n  graduateProfile: string;\n  evidence: EvidenceItem[];\n  reflections: Record<string, string>;\n}\n\ntype Step = 'landing' | 'year-level' | 'badge-selection' | 'evidence-upload' | 'reflection' | 'panel-prep' | 'slide-generation' | 'export';\n\ntype YearLevel = 'junior' | 'senior';\n\nconst MOCK_USER_ID = \"1\";\n\n// Official OJC evidence types from the feedback form\nconst EVIDENCE_TYPES = [\n  { value: 'photos', label: 'Photos', icon: 'fas fa-camera' },\n  { value: 'reflections', label: 'Reflections', icon: 'fas fa-edit' },\n  { value: 'interviews', label: 'Interviews', icon: 'fas fa-microphone' },\n  { value: 'iterations', label: 'Iterations', icon: 'fas fa-redo' },\n  { value: 'prototypes', label: 'Prototypes', icon: 'fas fa-cubes' },\n  { value: 'videos', label: 'Videos', icon: 'fas fa-video' },\n  { value: 'awards', label: 'Awards', icon: 'fas fa-trophy' },\n  { value: 'charts', label: 'Charts/Graphs', icon: 'fas fa-chart-bar' },\n  { value: 'work', label: 'Work', icon: 'fas fa-file-alt' },\n  { value: 'audio', label: 'Audio', icon: 'fas fa-volume-up' },\n  { value: 'mistakes', label: 'Mistakes/Retakes', icon: 'fas fa-exclamation-triangle' },\n  { value: 'process', label: 'Process/Steps', icon: 'fas fa-list-ol' },\n  { value: 'witnesses', label: 'Witnesses', icon: 'fas fa-users' },\n  { value: 'feedback', label: 'Feedback', icon: 'fas fa-comments' },\n  { value: 'other', label: 'Other', icon: 'fas fa-plus-circle' }\n] as const;\n\nconst EVIDENCE_SOURCES = [\n  { value: 'MAC', label: 'MAC (Maths, Arts, Creativity)' },\n  { value: 'LIT', label: 'LIT (Literacy)' },\n  { value: 'NUM', label: 'NUM (Numeracy)' },\n  { value: 'TAIP', label: 'TAIP (Te Aotearoa i te Pakihi)' },\n  { value: 'WO', label: 'WO (World of Work)' },\n  { value: 'Clubs', label: 'Clubs' },\n  { value: 'Outside OJC', label: 'Experience outside of OJC' }\n] as const;\n\nexport default function BadgeBuilder() {\n  const [currentStep, setCurrentStep] = useState<Step>('landing');\n  const [yearLevel, setYearLevel] = useState<YearLevel | null>(null);\n  const [selectedBadge, setSelectedBadge] = useState<Badge | null>(null);\n  const [evidence, setEvidence] = useState<EvidenceItem[]>([]);\n  const [reflections, setReflections] = useState<Record<string, string>>({});\n  const [slideData, setSlideData] = useState<SlideData | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch all badges\n  const { data: badges = [] } = useQuery<Badge[]>({\n    queryKey: ['/api/badges'],\n  });\n\n  // Filter badges by year level and group by graduate profile\n  const filteredBadges = badges.filter(badge => {\n    if (!yearLevel) return true;\n    return yearLevel === 'junior' ? badge.name.includes('Junior') : badge.name.includes('Senior');\n  });\n\n  const badgesByProfile = filteredBadges.reduce((acc, badge) => {\n    if (!acc[badge.graduateProfile]) {\n      acc[badge.graduateProfile] = [];\n    }\n    acc[badge.graduateProfile].push(badge);\n    return acc;\n  }, {} as Record<string, Badge[]>);\n\n  const generateSlideMutation = useMutation({\n    mutationFn: async (data: SlideData) => {\n      const response = await apiRequest('POST', '/api/slides/generate', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSlideData(data);\n      setCurrentStep('export');\n      toast({\n        title: \"Slides generated! ✨\",\n        description: \"Your badge presentation is ready to download and share.\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error generating slides\",\n        description: \"Please try again later.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const addEvidence = () => {\n    if (evidence.length < 6) {\n      setEvidence([...evidence, {\n        id: Math.random().toString(36).substr(2, 9),\n        type: 'reflections',\n        title: '',\n        description: '',\n        source: 'MAC'\n      }]);\n    }\n  };\n\n  const updateEvidence = (id: string, updates: Partial<EvidenceItem>) => {\n    setEvidence(evidence.map(item => \n      item.id === id ? { ...item, ...updates } : item\n    ));\n  };\n\n  const removeEvidence = (id: string) => {\n    setEvidence(evidence.filter(item => item.id !== id));\n  };\n\n  const handleGenerateSlides = () => {\n    if (!selectedBadge) return;\n    \n    const data: SlideData = {\n      badgeId: selectedBadge.id,\n      badgeName: selectedBadge.name,\n      graduateProfile: selectedBadge.graduateProfile,\n      evidence,\n      reflections\n    };\n    \n    generateSlideMutation.mutate(data);\n    setCurrentStep('slide-generation');\n  };\n\n  const resetBuilder = () => {\n    setCurrentStep('landing');\n    setYearLevel(null);\n    setSelectedBadge(null);\n    setEvidence([]);\n    setReflections({});\n    setSlideData(null);\n  };\n\n  if (currentStep === 'landing') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-primary/10 via-secondary/5 to-accent/10 flex items-center justify-center p-6\">\n        <Card className=\"max-w-2xl w-full\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-20 h-20 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-medal text-3xl text-primary-foreground\"></i>\n            </div>\n            <CardTitle className=\"text-4xl font-bold mb-2\" data-testid=\"builder-title\">\n              OJC Badge Builder ✨\n            </CardTitle>\n            <p className=\"text-lg text-muted-foreground\" data-testid=\"builder-description\">\n              Time to showcase your learning! Let's build your badge portfolio together 🚀\n            </p>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n              <div className=\"p-4\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                  <i className=\"fas fa-search text-primary text-xl\"></i>\n                </div>\n                <h3 className=\"font-semibold mb-2\">Find Your Evidence</h3>\n                <p className=\"text-sm text-muted-foreground\">Look through your Google folders, camera roll, and projects</p>\n              </div>\n              <div className=\"p-4\">\n                <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                  <i className=\"fas fa-lightbulb text-secondary text-xl\"></i>\n                </div>\n                <h3 className=\"font-semibold mb-2\">Reflect & Connect</h3>\n                <p className=\"text-sm text-muted-foreground\">Show what you learned and how you grew</p>\n              </div>\n              <div className=\"p-4\">\n                <div className=\"w-12 h-12 bg-success/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                  <i className=\"fas fa-presentation text-success text-xl\"></i>\n                </div>\n                <h3 className=\"font-semibold mb-2\">Present & Celebrate</h3>\n                <p className=\"text-sm text-muted-foreground\">Get ready to pitch to the badge panel</p>\n              </div>\n            </div>\n            <Button \n              onClick={() => setCurrentStep('year-level')} \n              size=\"lg\" \n              className=\"text-lg px-8 py-4\"\n              data-testid=\"button-start-badge\"\n            >\n              Let's Do This! 🎯\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (currentStep === 'year-level') {\n    return (\n      <div className=\"min-h-screen bg-background p-6 flex items-center justify-center\">\n        <Card className=\"max-w-md w-full\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl mb-2\" data-testid=\"year-level-title\">\n              What year are you in?\n            </CardTitle>\n            <p className=\"text-muted-foreground\">\n              This helps us show you the right badges for your level\n            </p>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button\n              variant={yearLevel === 'junior' ? 'default' : 'outline'}\n              className=\"w-full h-auto p-6\"\n              onClick={() => setYearLevel('junior')}\n              data-testid=\"select-junior\"\n            >\n              <div className=\"text-center\">\n                <div className=\"text-2xl mb-2\">🌱</div>\n                <div className=\"font-semibold text-lg\">Junior (Year 7-8)</div>\n                <div className=\"text-sm opacity-75\">Building your foundation</div>\n              </div>\n            </Button>\n            <Button\n              variant={yearLevel === 'senior' ? 'default' : 'outline'}\n              className=\"w-full h-auto p-6\"\n              onClick={() => setYearLevel('senior')}\n              data-testid=\"select-senior\"\n            >\n              <div className=\"text-center\">\n                <div className=\"text-2xl mb-2\">🚀</div>\n                <div className=\"font-semibold text-lg\">Senior (Year 9-10)</div>\n                <div className=\"text-sm opacity-75\">Taking it to the next level</div>\n              </div>\n            </Button>\n            \n            {yearLevel && (\n              <div className=\"flex justify-between mt-8\">\n                <Button variant=\"outline\" onClick={resetBuilder}>\n                  <i className=\"fas fa-arrow-left mr-2\"></i>\n                  Back\n                </Button>\n                <Button \n                  onClick={() => setCurrentStep('badge-selection')}\n                  data-testid=\"button-continue-to-badges\"\n                >\n                  Show Me My Badges\n                  <i className=\"fas fa-arrow-right ml-2\"></i>\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (currentStep === 'badge-selection') {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"badge-selection-title\">\n              Choose Your Badge ({yearLevel === 'junior' ? 'Junior' : 'Senior'} Level)\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Pick the Graduate Profile badge that matches your evidence best\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Object.entries(GRADUATE_PROFILE_LABELS).map(([profile, label]) => {\n              const profileBadges = badgesByProfile[profile] || [];\n              \n              return (\n                <Card key={profile} className=\"overflow-hidden\">\n                  <CardHeader className={cn(\"text-center\", `graduate-profile-${profile}`)}>\n                    <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <i className={`${GRADUATE_PROFILE_ICONS[profile]} text-2xl text-white`}></i>\n                    </div>\n                    <CardTitle className=\"text-white\">{label}</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-4\">\n                    <div className=\"space-y-2\">\n                      {profileBadges.map((badge) => (\n                        <Button\n                          key={badge.id}\n                          variant=\"outline\"\n                          className=\"w-full justify-start text-left h-auto p-3\"\n                          onClick={() => {\n                            setSelectedBadge(badge);\n                            setCurrentStep('evidence-upload');\n                          }}\n                          data-testid={`select-badge-${badge.id}`}\n                        >\n                          <div>\n                            <div className=\"font-medium\">{badge.name.replace(' Junior', '').replace(' Senior', '')}</div>\n                            <div className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">{badge.description}</div>\n                          </div>\n                        </Button>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          <div className=\"text-center mt-8\">\n            <Button variant=\"outline\" onClick={() => setCurrentStep('year-level')} data-testid=\"button-back-to-year\">\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Change Year Level\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 'evidence-upload') {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"evidence-upload-title\">\n              Show Your Evidence 📁\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Add up to 6 pieces of evidence for <strong>{selectedBadge?.name}</strong>\n            </p>\n          </div>\n\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>What the badge panel is looking for:</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-sm text-muted-foreground whitespace-pre-line\">{selectedBadge?.criteria}</div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-6\">\n            {evidence.map((item, index) => (\n              <Card key={item.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">Evidence {index + 1}</CardTitle>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={() => removeEvidence(item.id)}\n                      data-testid={`remove-evidence-${item.id}`}\n                    >\n                      <i className=\"fas fa-trash\"></i>\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor={`type-${item.id}`}>Evidence Type</Label>\n                      <Select\n                        value={item.type}\n                        onValueChange={(value) => updateEvidence(item.id, { type: value as any })}\n                      >\n                        <SelectTrigger data-testid={`evidence-type-${item.id}`}>\n                          <SelectValue placeholder=\"Choose evidence type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {EVIDENCE_TYPES.map(type => (\n                            <SelectItem key={type.value} value={type.value}>\n                              <div className=\"flex items-center gap-2\">\n                                <i className={type.icon}></i>\n                                {type.label}\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor={`source-${item.id}`}>Where's this from?</Label>\n                      <Select\n                        value={item.source}\n                        onValueChange={(value) => updateEvidence(item.id, { source: value as any })}\n                      >\n                        <SelectTrigger data-testid={`evidence-source-${item.id}`}>\n                          <SelectValue placeholder=\"Choose source\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {EVIDENCE_SOURCES.map(source => (\n                            <SelectItem key={source.value} value={source.value}>\n                              {source.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor={`title-${item.id}`}>Give it a catchy title</Label>\n                    <Input\n                      id={`title-${item.id}`}\n                      value={item.title}\n                      onChange={(e) => updateEvidence(item.id, { title: e.target.value })}\n                      placeholder=\"e.g., 'My epic science fair project'\"\n                      data-testid={`evidence-title-${item.id}`}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor={`description-${item.id}`}>Describe your evidence</Label>\n                    <Textarea\n                      id={`description-${item.id}`}\n                      value={item.description}\n                      onChange={(e) => updateEvidence(item.id, { description: e.target.value })}\n                      placeholder=\"What is it? When did you do it? Why is it awesome evidence for this badge?\"\n                      rows={3}\n                      data-testid={`evidence-description-${item.id}`}\n                    />\n                  </div>\n\n                  {['photos', 'videos', 'audio', 'work', 'charts'].includes(item.type) && (\n                    <div>\n                      <Label htmlFor={`file-${item.id}`}>Upload File (Optional)</Label>\n                      <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                        <i className=\"fas fa-cloud-upload-alt text-3xl text-muted-foreground mb-3\"></i>\n                        <div className=\"font-medium mb-2\">Drop files here or click to upload</div>\n                        <div className=\"text-sm text-muted-foreground mb-3\">\n                          Max 10MB - or just describe where it's saved!\n                        </div>\n                        <Input\n                          id={`file-${item.id}`}\n                          type=\"file\"\n                          onChange={(e) => updateEvidence(item.id, { file: e.target.files?.[0] })}\n                          accept=\"image/*,video/*,audio/*,.pdf,.doc,.docx,.txt\"\n                          data-testid={`evidence-file-${item.id}`}\n                        />\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n\n            {evidence.length < 6 && (\n              <Card className=\"border-dashed\">\n                <CardContent className=\"p-8 text-center\">\n                  <Button onClick={addEvidence} variant=\"outline\" data-testid=\"button-add-evidence\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add More Evidence ({evidence.length}/6)\n                  </Button>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Quality over quantity - even 3-4 strong pieces of evidence can win badges!\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          <div className=\"flex justify-between mt-8\">\n            <Button variant=\"outline\" onClick={() => setCurrentStep('badge-selection')}>\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Back to Badge Selection\n            </Button>\n            <Button \n              onClick={() => setCurrentStep('reflection')} \n              disabled={evidence.length === 0}\n              data-testid=\"button-continue-to-reflection\"\n            >\n              Now Let's Reflect\n              <i className=\"fas fa-arrow-right ml-2\"></i>\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 'reflection') {\n    const reflectionPrompts = [\n      {\n        id: 'learning',\n        question: 'What did you actually learn through this?',\n        placeholder: 'Think beyond just completing it - what skills, knowledge, or insights did you gain?',\n        hint: 'E.g., \"At first I didn\\'t know how to..., but I learned that...\"'\n      },\n      {\n        id: 'growth',\n        question: 'How does this show you\\'ve grown as a learner?',\n        placeholder: 'What\\'s different about you now compared to before?',\n        hint: 'E.g., \"This pushed me because... and now I can...\"'\n      },\n      {\n        id: 'connection',\n        question: `How does this connect to ${GRADUATE_PROFILE_LABELS[selectedBadge?.graduateProfile || 'excellence']}?`,\n        placeholder: 'Make a clear connection between your evidence and this Graduate Profile value',\n        hint: 'Be specific about which parts of your evidence show this value'\n      },\n      {\n        id: 'application',\n        question: 'When have you used these skills in other situations?',\n        placeholder: 'How have you applied what you learned in different contexts?',\n        hint: 'Think about other subjects, outside school, or future situations'\n      }\n    ];\n\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"reflection-title\">\n              Time to Reflect 🤔\n            </h1>\n            <p className=\"text-muted-foreground\">\n              This is where you show the panel what you actually learned (not just what you did!)\n            </p>\n          </div>\n\n          <div className=\"space-y-6\">\n            {reflectionPrompts.map((prompt) => (\n              <Card key={prompt.id}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{prompt.question}</CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">{prompt.hint}</p>\n                </CardHeader>\n                <CardContent>\n                  <Textarea\n                    value={reflections[prompt.id] || ''}\n                    onChange={(e) => setReflections(prev => ({\n                      ...prev,\n                      [prompt.id]: e.target.value\n                    }))}\n                    placeholder={prompt.placeholder}\n                    rows={4}\n                    data-testid={`reflection-${prompt.id}`}\n                  />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"flex justify-between mt-8\">\n            <Button variant=\"outline\" onClick={() => setCurrentStep('evidence-upload')}>\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Back to Evidence\n            </Button>\n            <Button \n              onClick={() => setCurrentStep('panel-prep')}\n              disabled={Object.keys(reflections).length === 0}\n              data-testid=\"button-continue-to-panel-prep\"\n            >\n              Prep for Panel\n              <i className=\"fas fa-arrow-right ml-2\"></i>\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 'panel-prep') {\n    const panelQuestions = [\n      \"Why did you choose this badge?\",\n      \"When have you applied this criteria in other situations? What does it look like in practice?\",\n      \"How do you use these skills in 'real life'?\",\n      \"Have you ever taught anyone this skill/knowledge?\",\n      \"What other ways could you collect evidence to show you have met this criteria?\",\n      \"What evidence have you got here that could be used for another badge?\",\n      \"What next steps could you take in order to level up in this badge?\",\n      \"Can you show me/us...? (live evidence)\"\n    ];\n\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"panel-prep-title\">\n              Get Ready for the Panel! 🎤\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Here are the questions they might ask - practice your answers!\n            </p>\n          </div>\n\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Quick Tips for Your Badge Pitch</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <h4 className=\"font-semibold text-green-600 mb-2\">✓ DO</h4>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li>• Be genuine and honest</li>\n                    <li>• Show your evidence clearly</li>\n                    <li>• Explain what you learned</li>\n                    <li>• Ask for help if you need it</li>\n                    <li>• Practice with family/friends</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-red-600 mb-2\">✗ DON'T</h4>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li>• Make things up</li>\n                    <li>• Just show photos without explaining</li>\n                    <li>• Bring everything you've ever done</li>\n                    <li>• Be scared - they want you to succeed!</li>\n                    <li>• Forget to reflect on your learning</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Questions They Might Ask</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {panelQuestions.map((question, index) => (\n                  <div key={index} className=\"p-3 bg-muted/50 rounded-lg\">\n                    <p className=\"font-medium\">{question}</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Your 2-Minute Pitch Outline</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-semibold\">1. Intro (15 seconds)</h4>\n                  <p className=\"text-sm text-muted-foreground\">\"Hi, I'm [name] and I'm here to pitch for [badge name] because...\"</p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">2. Evidence walkthrough (60 seconds)</h4>\n                  <p className=\"text-sm text-muted-foreground\">Show your best 3-4 pieces of evidence and explain how each one proves the criteria</p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">3. Reflection (30 seconds)</h4>\n                  <p className=\"text-sm text-muted-foreground\">What you learned and how you've grown</p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">4. Wrap up (15 seconds)</h4>\n                  <p className=\"text-sm text-muted-foreground\">\"That's why I believe I've earned this badge. Any questions?\"</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-between mt-8\">\n            <Button variant=\"outline\" onClick={() => setCurrentStep('reflection')}>\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Back to Reflections\n            </Button>\n            <Button \n              onClick={handleGenerateSlides}\n              data-testid=\"button-generate-slides\"\n            >\n              Generate My Slides ✨\n              <i className=\"fas fa-magic ml-2\"></i>\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 'slide-generation') {\n    return (\n      <div className=\"min-h-screen bg-background p-6 flex items-center justify-center\">\n        <Card className=\"max-w-md w-full\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-magic text-3xl text-primary animate-pulse\"></i>\n            </div>\n            <h2 className=\"text-2xl font-bold mb-4\">Creating Your Badge Presentation ✨</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              We're building your slides with all your evidence and reflections. Almost done!\n            </p>\n            <div className=\"w-full bg-muted rounded-full h-2\">\n              <div className=\"bg-primary h-2 rounded-full animate-pulse\" style={{ width: '75%' }}></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (currentStep === 'export') {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"export-title\">\n              Your Badge Presentation is Ready! 🎉\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Time to download, practice, and book your badge panel!\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Download Your Presentation</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"download-pptx\">\n                  <i className=\"fas fa-file-powerpoint mr-3 text-orange-500\"></i>\n                  Download PowerPoint (.pptx)\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"download-pdf\">\n                  <i className=\"fas fa-file-pdf mr-3 text-red-500\"></i>\n                  Download PDF\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"view-online\">\n                  <i className=\"fas fa-eye mr-3 text-blue-500\"></i>\n                  View Online Presentation\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Next Steps</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"book-panel\">\n                  <i className=\"fas fa-calendar mr-3 text-green-500\"></i>\n                  Book Badge Panel Slot\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"share-teacher\">\n                  <i className=\"fas fa-share mr-3 text-purple-500\"></i>\n                  Share with Teacher\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"save-draft\">\n                  <i className=\"fas fa-save mr-3 text-cyan-500\"></i>\n                  Save as Draft\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>Your Presentation Preview</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"bg-gradient-to-br from-primary/20 to-primary/10 p-4 rounded-lg text-center\">\n                  <div className=\"aspect-video bg-primary/20 rounded mb-2 flex items-center justify-center\">\n                    <i className=\"fas fa-medal text-primary text-xl\"></i>\n                  </div>\n                  <div className=\"text-xs font-medium\">Title Slide</div>\n                  <div className=\"text-xs text-muted-foreground\">{selectedBadge?.name}</div>\n                </div>\n                {evidence.slice(0, 3).map((item, index) => (\n                  <div key={index} className=\"bg-muted/50 p-4 rounded-lg text-center\">\n                    <div className=\"aspect-video bg-muted rounded mb-2 flex items-center justify-center\">\n                      <i className={`${EVIDENCE_TYPES.find(t => t.value === item.type)?.icon} text-muted-foreground`}></i>\n                    </div>\n                    <div className=\"text-xs font-medium\">Evidence {index + 1}</div>\n                    <div className=\"text-xs text-muted-foreground truncate\">{item.title || 'Untitled'}</div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-green-200\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-bold text-lg mb-3\">🎯 Final Badge Panel Checklist</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Before your panel:</h4>\n                  <ul className=\"space-y-1\">\n                    <li>□ Practice your 2-minute pitch</li>\n                    <li>□ Print or save your slides</li>\n                    <li>□ Prepare your physical evidence</li>\n                    <li>□ Think about panel questions</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Bring to the panel:</h4>\n                  <ul className=\"space-y-1\">\n                    <li>□ Your slides/portfolio</li>\n                    <li>□ Physical evidence (if any)</li>\n                    <li>□ A positive attitude</li>\n                    <li>□ Confidence in your learning!</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-between mt-8\">\n            <Button variant=\"outline\" onClick={resetBuilder} data-testid=\"button-start-new\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Start Another Badge\n            </Button>\n            <Button onClick={() => setCurrentStep('landing')} data-testid=\"button-back-home\">\n              <i className=\"fas fa-home mr-2\"></i>\n              Back to Home\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}","size_bytes":35779},"client/src/pages/badge-catalog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport BadgeCard from \"@/components/badge/badge-card\";\nimport EvidenceModal from \"@/components/badge/evidence-modal\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge, BadgeApplication } from \"@shared/schema\";\nimport { GRADUATE_PROFILE_LABELS } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Mock user ID - in a real app this would come from auth context\nconst MOCK_USER_ID = \"1\";\n\nexport default function BadgeCatalog() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedProfile, setSelectedProfile] = useState<string>(\"all\");\n  const [isEvidenceModalOpen, setIsEvidenceModalOpen] = useState(false);\n  const [selectedBadgeId, setSelectedBadgeId] = useState<string>(\"\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch all badges\n  const { data: badges = [] } = useQuery<Badge[]>({\n    queryKey: ['/api/badges'],\n  });\n\n  // Fetch user applications\n  const { data: applications = [] } = useQuery<(BadgeApplication & { badge: Badge; evidence: any[] })[]>({\n    queryKey: ['/api/users', MOCK_USER_ID, 'applications'],\n  });\n\n  // Create application mutation\n  const createApplicationMutation = useMutation({\n    mutationFn: async (data: { userId: string; badgeId: string }) => {\n      const response = await apiRequest('POST', '/api/applications', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Application started\",\n        description: \"You can now submit evidence for this badge.\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error starting application\",\n        description: \"Please try again later.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Filter badges based on search and profile\n  const filteredBadges = badges.filter(badge => {\n    const matchesSearch = badge.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         badge.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesProfile = selectedProfile === \"all\" || badge.graduateProfile === selectedProfile;\n    return matchesSearch && matchesProfile;\n  });\n\n  // Create a map of applications by badge ID\n  const applicationsByBadgeId = applications.reduce((acc, app) => {\n    acc[app.badgeId] = app;\n    return acc;\n  }, {} as Record<string, BadgeApplication & { badge: Badge; evidence: any[] }>);\n\n  const handleStartApplication = (badgeId: string) => {\n    createApplicationMutation.mutate({\n      userId: MOCK_USER_ID,\n      badgeId\n    });\n  };\n\n  const handleSubmitEvidence = (badgeId: string) => {\n    setSelectedBadgeId(badgeId);\n    setIsEvidenceModalOpen(true);\n  };\n\n  return (\n    <>\n      <Header \n        title=\"Badge Catalog\" \n        description=\"Explore and apply for Graduate Profile badges\"\n        onSubmitEvidence={() => setIsEvidenceModalOpen(true)}\n      />\n      \n      <div className=\"p-6 overflow-y-auto h-full\">\n        {/* Search and Filter */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n          <div className=\"flex-1\">\n            <Input\n              placeholder=\"Search badges...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full\"\n              data-testid=\"input-search-badges\"\n            />\n          </div>\n          <Select value={selectedProfile} onValueChange={setSelectedProfile}>\n            <SelectTrigger className=\"sm:w-64\" data-testid=\"select-profile-filter\">\n              <SelectValue placeholder=\"Filter by Graduate Profile\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Profiles</SelectItem>\n              {Object.entries(GRADUATE_PROFILE_LABELS).map(([key, label]) => (\n                <SelectItem key={key} value={key}>{label}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Badge Grid */}\n        {filteredBadges.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <i className=\"fas fa-search text-4xl text-muted-foreground mb-4\"></i>\n            <h3 className=\"text-lg font-medium mb-2\">No badges found</h3>\n            <p className=\"text-muted-foreground\">Try adjusting your search or filter criteria</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredBadges.map((badge) => {\n              const application = applicationsByBadgeId[badge.id];\n              return (\n                <BadgeCard\n                  key={badge.id}\n                  badge={badge}\n                  application={application}\n                  onStartApplication={() => handleStartApplication(badge.id)}\n                  onContinueApplication={() => handleSubmitEvidence(badge.id)}\n                  onViewApplication={() => console.log('View application:', application?.id)}\n                />\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      <EvidenceModal\n        isOpen={isEvidenceModalOpen}\n        onClose={() => {\n          setIsEvidenceModalOpen(false);\n          setSelectedBadgeId(\"\");\n        }}\n        badges={badges}\n        selectedBadgeId={selectedBadgeId}\n        applicationId={selectedBadgeId ? applicationsByBadgeId[selectedBadgeId]?.id : undefined}\n      />\n    </>\n  );\n}\n","size_bytes":5774},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport StatsOverview from \"@/components/stats/stats-overview\";\nimport GraduateProfileProgressComponent from \"@/components/progress/graduate-profile-progress\";\nimport BadgeCard from \"@/components/badge/badge-card\";\nimport EvidenceModal from \"@/components/badge/evidence-modal\";\nimport { UserStats, GraduateProfileProgress } from \"@/types\";\nimport { Badge, BadgeApplication } from \"@shared/schema\";\n\n// Mock user ID - in a real app this would come from auth context\nconst MOCK_USER_ID = \"1\";\n\nexport default function Dashboard() {\n  const [isEvidenceModalOpen, setIsEvidenceModalOpen] = useState(false);\n\n  // Fetch user stats\n  const { data: stats = { earnedBadges: 0, inProgress: 0, totalBadges: 0, completionRate: 0 } } = useQuery<UserStats>({\n    queryKey: ['/api/users', MOCK_USER_ID, 'stats'],\n  });\n\n  // Fetch graduate profile progress\n  const { data: progress = [] } = useQuery<GraduateProfileProgress[]>({\n    queryKey: ['/api/users', MOCK_USER_ID, 'progress'],\n  });\n\n  // Fetch user applications\n  const { data: applications = [] } = useQuery<(BadgeApplication & { badge: Badge; evidence: any[] })[]>({\n    queryKey: ['/api/users', MOCK_USER_ID, 'applications'],\n  });\n\n  // Fetch all badges for evidence modal\n  const { data: badges = [] } = useQuery<Badge[]>({\n    queryKey: ['/api/badges'],\n  });\n\n  // Get current applications (in progress or submitted)\n  const currentApplications = applications.filter(app => \n    ['in_progress', 'submitted', 'in_review'].includes(app.status)\n  ).slice(0, 3);\n\n  const recentActivities = [\n    {\n      type: 'badge_earned',\n      title: 'Leadership Badge Earned',\n      timestamp: '2 days ago',\n      icon: 'fas fa-check',\n      color: 'bg-success'\n    },\n    {\n      type: 'evidence_submitted',\n      title: 'Evidence submitted for Teamwork',\n      timestamp: '5 days ago',\n      icon: 'fas fa-upload',\n      color: 'bg-warning'\n    },\n    {\n      type: 'application_started',\n      title: 'Started Creative Thinking badge',\n      timestamp: '1 week ago',\n      icon: 'fas fa-plus',\n      color: 'bg-primary'\n    }\n  ];\n\n  return (\n    <>\n      <Header \n        title=\"Dashboard\" \n        description=\"Track your badge progress and achievements\"\n        onSubmitEvidence={() => setIsEvidenceModalOpen(true)}\n      />\n      \n      <div className=\"p-6 overflow-y-auto h-full\">\n        <StatsOverview stats={stats} />\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <GraduateProfileProgressComponent progress={progress} />\n          </div>\n          \n          <div>\n            <div className=\"bg-card p-6 rounded-lg border border-border\">\n              <h2 className=\"text-xl font-bold mb-6\" data-testid=\"recent-activity-title\">Recent Activity</h2>\n              <div className=\"space-y-4\">\n                {recentActivities.map((activity, index) => (\n                  <div key={index} className=\"flex items-start space-x-3 p-3 rounded-lg bg-muted/50\">\n                    <div className={`w-8 h-8 ${activity.color} rounded-full flex items-center justify-center flex-shrink-0`}>\n                      <i className={`${activity.icon} text-white text-xs`}></i>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium\" data-testid={`activity-title-${index}`}>{activity.title}</p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`activity-time-${index}`}>{activity.timestamp}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-bold\" data-testid=\"current-applications-title\">Current Badge Applications</h2>\n            <a href=\"/badges\" className=\"text-primary hover:underline text-sm font-medium\" data-testid=\"link-view-all\">\n              View all\n            </a>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {currentApplications.length === 0 ? (\n              <div className=\"col-span-full text-center py-12\">\n                <i className=\"fas fa-medal text-4xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-medium mb-2\">No active applications</h3>\n                <p className=\"text-muted-foreground mb-4\">Start your badge journey by browsing available badges</p>\n                <a href=\"/badges\" className=\"text-primary hover:underline\">Browse Badge Catalog</a>\n              </div>\n            ) : (\n              currentApplications.map((application) => (\n                <BadgeCard\n                  key={application.id}\n                  badge={application.badge}\n                  application={application}\n                  onContinueApplication={() => console.log('Continue application:', application.id)}\n                  onViewApplication={() => console.log('View application:', application.id)}\n                />\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n\n      <EvidenceModal\n        isOpen={isEvidenceModalOpen}\n        onClose={() => setIsEvidenceModalOpen(false)}\n        badges={badges}\n      />\n    </>\n  );\n}\n","size_bytes":5472},"client/src/pages/evidence.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport EvidenceModal from \"@/components/badge/evidence-modal\";\nimport { Badge, BadgeApplication, Evidence } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { EVIDENCE_TYPE_LABELS } from \"@/types\";\n\n// Mock user ID - in a real app this would come from auth context\nconst MOCK_USER_ID = \"1\";\n\nexport default function EvidencePage() {\n  const [isEvidenceModalOpen, setIsEvidenceModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch user applications with evidence\n  const { data: applications = [] } = useQuery<(BadgeApplication & { badge: Badge; evidence: Evidence[] })[]>({\n    queryKey: ['/api/users', MOCK_USER_ID, 'applications'],\n  });\n\n  // Fetch all badges for evidence modal\n  const { data: badges = [] } = useQuery<Badge[]>({\n    queryKey: ['/api/badges'],\n  });\n\n  // Flatten all evidence from all applications\n  const allEvidence = applications.flatMap(app => \n    app.evidence.map(evidence => ({\n      ...evidence,\n      badge: app.badge,\n      application: app\n    }))\n  );\n\n  // Filter evidence based on search\n  const filteredEvidence = allEvidence.filter(evidence =>\n    evidence.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    evidence.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    evidence.badge.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <>\n      <Header \n        title=\"My Evidence\" \n        description=\"Manage and review your submitted evidence\"\n        onSubmitEvidence={() => setIsEvidenceModalOpen(true)}\n      />\n      \n      <div className=\"p-6 overflow-y-auto h-full\">\n        {/* Search */}\n        <div className=\"mb-8\">\n          <Input\n            placeholder=\"Search evidence...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"max-w-md\"\n            data-testid=\"input-search-evidence\"\n          />\n        </div>\n\n        {/* Evidence List */}\n        {filteredEvidence.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <i className=\"fas fa-folder-open text-4xl text-muted-foreground mb-4\"></i>\n            <h3 className=\"text-lg font-medium mb-2\">No evidence found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery ? \"Try adjusting your search criteria\" : \"Start by submitting evidence for your badge applications\"}\n            </p>\n            <Button onClick={() => setIsEvidenceModalOpen(true)} data-testid=\"button-submit-first-evidence\">\n              Submit Evidence\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {filteredEvidence.map((evidence) => (\n              <div key={evidence.id} className=\"bg-card p-6 rounded-lg border border-border\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-lg mb-2\" data-testid={`evidence-title-${evidence.id}`}>\n                      {evidence.title}\n                    </h3>\n                    <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mb-3\">\n                      <span className=\"flex items-center space-x-1\">\n                        <i className=\"fas fa-medal\"></i>\n                        <span data-testid={`evidence-badge-${evidence.id}`}>{evidence.badge.name}</span>\n                      </span>\n                      <span className=\"flex items-center space-x-1\">\n                        <i className=\"fas fa-calendar\"></i>\n                        <span data-testid={`evidence-date-${evidence.id}`}>{formatDate(evidence.createdAt.toString())}</span>\n                      </span>\n                      <span className=\"flex items-center space-x-1\">\n                        <i className=\"fas fa-file\"></i>\n                        <span data-testid={`evidence-type-${evidence.id}`}>{EVIDENCE_TYPE_LABELS[evidence.type]}</span>\n                      </span>\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" data-testid={`button-edit-${evidence.id}`}>\n                    <i className=\"fas fa-edit mr-2\"></i>\n                    Edit\n                  </Button>\n                </div>\n                \n                <p className=\"text-muted-foreground mb-4\" data-testid={`evidence-description-${evidence.id}`}>\n                  {evidence.description}\n                </p>\n                \n                {evidence.content && (\n                  <div className=\"bg-muted/50 p-4 rounded-lg mb-4\">\n                    <h4 className=\"font-medium mb-2\">Written Reflection:</h4>\n                    <p className=\"text-sm whitespace-pre-wrap\" data-testid={`evidence-content-${evidence.id}`}>\n                      {evidence.content}\n                    </p>\n                  </div>\n                )}\n                \n                {evidence.fileUrl && (\n                  <div className=\"flex items-center space-x-2 p-3 bg-muted/50 rounded-lg\">\n                    <i className=\"fas fa-paperclip text-primary\"></i>\n                    <a \n                      href={evidence.fileUrl} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"text-primary hover:underline\"\n                      data-testid={`evidence-file-${evidence.id}`}\n                    >\n                      View attached file\n                    </a>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <EvidenceModal\n        isOpen={isEvidenceModalOpen}\n        onClose={() => setIsEvidenceModalOpen(false)}\n        badges={badges}\n      />\n    </>\n  );\n}\n","size_bytes":6168},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport { Badge, BadgeApplication, User } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { GRADUATE_PROFILE_LABELS, GRADUATE_PROFILE_ICONS } from \"@/types\";\n\n// Mock user ID - in a real app this would come from auth context\nconst MOCK_USER_ID = \"1\";\n\nexport default function ProfilePage() {\n  // Fetch user data\n  const { data: user } = useQuery<User>({\n    queryKey: ['/api/users', MOCK_USER_ID],\n  });\n\n  // Fetch user applications\n  const { data: applications = [] } = useQuery<(BadgeApplication & { badge: Badge; evidence: any[] })[]>({\n    queryKey: ['/api/users', MOCK_USER_ID, 'applications'],\n  });\n\n  // Get earned badges\n  const earnedBadges = applications.filter(app => app.status === 'earned');\n\n  // Group earned badges by graduate profile\n  const badgesByProfile = earnedBadges.reduce((acc, app) => {\n    const profile = app.badge.graduateProfile;\n    if (!acc[profile]) {\n      acc[profile] = [];\n    }\n    acc[profile].push(app);\n    return acc;\n  }, {} as Record<string, (BadgeApplication & { badge: Badge; evidence: any[] })[]>);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  if (!user) {\n    return (\n      <>\n        <Header title=\"Profile\" description=\"Your personal badge portfolio\" />\n        <div className=\"p-6\">\n          <div className=\"text-center\">Loading...</div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Header title=\"Profile\" description=\"Your personal badge portfolio\" />\n      \n      <div className=\"p-6 overflow-y-auto h-full\">\n        {/* User Info Section */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Profile Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-6\">\n              <Avatar className=\"w-24 h-24\">\n                <AvatarFallback className=\"text-2xl\" data-testid=\"user-avatar\">\n                  {getInitials(user.firstName, user.lastName)}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"user-name\">\n                  {user.firstName} {user.lastName}\n                </h2>\n                <p className=\"text-muted-foreground mb-1\" data-testid=\"user-email\">{user.email}</p>\n                <p className=\"text-muted-foreground mb-4\" data-testid=\"user-username\">@{user.username}</p>\n                <div className=\"flex items-center space-x-4 text-sm\">\n                  <span className=\"flex items-center space-x-1\">\n                    <i className=\"fas fa-trophy text-success\"></i>\n                    <span data-testid=\"earned-badges-count\">{earnedBadges.length} badges earned</span>\n                  </span>\n                  <span className=\"flex items-center space-x-1\">\n                    <i className=\"fas fa-calendar\"></i>\n                    <span data-testid=\"join-date\">Joined {formatDate(user.createdAt.toString())}</span>\n                  </span>\n                </div>\n              </div>\n              <Button variant=\"outline\" data-testid=\"button-edit-profile\">\n                <i className=\"fas fa-edit mr-2\"></i>\n                Edit Profile\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Badge Showcase */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold mb-6\" data-testid=\"badge-showcase-title\">Badge Showcase</h2>\n          \n          {earnedBadges.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-12 text-center\">\n                <i className=\"fas fa-medal text-4xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-medium mb-2\">No badges earned yet</h3>\n                <p className=\"text-muted-foreground mb-4\">Start your badge journey by exploring available badges</p>\n                <Button data-testid=\"button-browse-badges\">\n                  <i className=\"fas fa-search mr-2\"></i>\n                  Browse Badges\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-8\">\n              {Object.entries(GRADUATE_PROFILE_LABELS).map(([profile, label]) => {\n                const profileBadges = badgesByProfile[profile] || [];\n                \n                if (profileBadges.length === 0) return null;\n                \n                return (\n                  <Card key={profile}>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-3\">\n                        <div className={`w-10 h-10 rounded-lg flex items-center justify-center graduate-profile-${profile}`}>\n                          <i className={`${GRADUATE_PROFILE_ICONS[profile]} text-lg`}></i>\n                        </div>\n                        <span data-testid={`profile-section-${profile}`}>{label}</span>\n                        <span className=\"text-sm font-normal text-muted-foreground\">\n                          ({profileBadges.length} badge{profileBadges.length !== 1 ? 's' : ''})\n                        </span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                        {profileBadges.map((application) => (\n                          <div key={application.id} className=\"p-4 border border-border rounded-lg\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <h4 className=\"font-semibold\" data-testid={`earned-badge-${application.badge.id}`}>\n                                {application.badge.name}\n                              </h4>\n                              <i className=\"fas fa-check-circle text-success\"></i>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-3\">\n                              {application.badge.description}\n                            </p>\n                            <div className=\"text-xs text-muted-foreground\">\n                              Earned on {application.reviewedAt ? formatDate(application.reviewedAt.toString()) : 'Unknown date'}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </div>\n\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle data-testid=\"recent-activity-title\">Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {applications\n                .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n                .slice(0, 5)\n                .map((application, index) => (\n                  <div key={application.id} className=\"flex items-center space-x-4 p-3 rounded-lg bg-muted/50\">\n                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center graduate-profile-${application.badge.graduateProfile}`}>\n                      <i className={`${GRADUATE_PROFILE_ICONS[application.badge.graduateProfile]} text-sm`}></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\" data-testid={`activity-${index}-title`}>\n                        {application.status === 'earned' ? 'Earned' : 'Applied for'} {application.badge.name}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`activity-${index}-date`}>\n                        {formatDate(application.createdAt.toString())}\n                      </p>\n                    </div>\n                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${\n                      application.status === 'earned' \n                        ? 'bg-success/10 text-success' \n                        : application.status === 'in_progress'\n                        ? 'bg-primary/10 text-primary'\n                        : 'bg-warning/10 text-warning'\n                    }`}>\n                      {application.status.replace('_', ' ').toUpperCase()}\n                    </div>\n                  </div>\n                ))}\n              \n              {applications.length === 0 && (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No activity yet. Start applying for badges to see your progress here.\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":9298},"client/src/pages/progress.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport StatsOverview from \"@/components/stats/stats-overview\";\nimport GraduateProfileProgressComponent from \"@/components/progress/graduate-profile-progress\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge, BadgeApplication } from \"@shared/schema\";\nimport { UserStats, GraduateProfileProgress, GRADUATE_PROFILE_LABELS } from \"@/types\";\n\n// Mock user ID - in a real app this would come from auth context\nconst MOCK_USER_ID = \"1\";\n\nexport default function ProgressPage() {\n  // Fetch user stats\n  const { data: stats = { earnedBadges: 0, inProgress: 0, totalBadges: 0, completionRate: 0 } } = useQuery<UserStats>({\n    queryKey: ['/api/users', MOCK_USER_ID, 'stats'],\n  });\n\n  // Fetch graduate profile progress\n  const { data: progress = [] } = useQuery<GraduateProfileProgress[]>({\n    queryKey: ['/api/users', MOCK_USER_ID, 'progress'],\n  });\n\n  // Fetch user applications\n  const { data: applications = [] } = useQuery<(BadgeApplication & { badge: Badge; evidence: any[] })[]>({\n    queryKey: ['/api/users', MOCK_USER_ID, 'applications'],\n  });\n\n  // Fetch all badges\n  const { data: badges = [] } = useQuery<Badge[]>({\n    queryKey: ['/api/badges'],\n  });\n\n  // Group applications by graduate profile\n  const applicationsByProfile = applications.reduce((acc, app) => {\n    const profile = app.badge.graduateProfile;\n    if (!acc[profile]) {\n      acc[profile] = [];\n    }\n    acc[profile].push(app);\n    return acc;\n  }, {} as Record<string, (BadgeApplication & { badge: Badge; evidence: any[] })[]>);\n\n  // Group badges by graduate profile\n  const badgesByProfile = badges.reduce((acc, badge) => {\n    const profile = badge.graduateProfile;\n    if (!acc[profile]) {\n      acc[profile] = [];\n    }\n    acc[profile].push(badge);\n    return acc;\n  }, {} as Record<string, Badge[]>);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'earned':\n        return 'text-success';\n      case 'in_review':\n      case 'submitted':\n        return 'text-warning';\n      case 'in_progress':\n        return 'text-primary';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'earned':\n        return 'fas fa-check-circle';\n      case 'in_review':\n        return 'fas fa-clock';\n      case 'submitted':\n        return 'fas fa-paper-plane';\n      case 'in_progress':\n        return 'fas fa-play-circle';\n      default:\n        return 'fas fa-circle';\n    }\n  };\n\n  return (\n    <>\n      <Header \n        title=\"Progress\" \n        description=\"Track your overall badge progress and achievements\"\n      />\n      \n      <div className=\"p-6 overflow-y-auto h-full\">\n        <StatsOverview stats={stats} />\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8\">\n          <div className=\"lg:col-span-2\">\n            <GraduateProfileProgressComponent progress={progress} />\n          </div>\n          \n          <div className=\"bg-card p-6 rounded-lg border border-border\">\n            <h2 className=\"text-xl font-bold mb-6\" data-testid=\"achievement-milestones-title\">Achievement Milestones</h2>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 rounded-lg bg-muted/50\">\n                <div className=\"flex items-center space-x-3\">\n                  <i className=\"fas fa-medal text-secondary text-lg\"></i>\n                  <span className=\"font-medium\">First Badge</span>\n                </div>\n                <i className={stats.earnedBadges > 0 ? \"fas fa-check text-success\" : \"fas fa-lock text-muted-foreground\"}></i>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 rounded-lg bg-muted/50\">\n                <div className=\"flex items-center space-x-3\">\n                  <i className=\"fas fa-fire text-warning text-lg\"></i>\n                  <span className=\"font-medium\">5 Badges</span>\n                </div>\n                <i className={stats.earnedBadges >= 5 ? \"fas fa-check text-success\" : \"fas fa-lock text-muted-foreground\"}></i>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 rounded-lg bg-muted/50\">\n                <div className=\"flex items-center space-x-3\">\n                  <i className=\"fas fa-crown text-yellow-500 text-lg\"></i>\n                  <span className=\"font-medium\">Profile Champion</span>\n                </div>\n                <i className={progress.some(p => p.percentage === 100) ? \"fas fa-check text-success\" : \"fas fa-lock text-muted-foreground\"}></i>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 rounded-lg bg-muted/50\">\n                <div className=\"flex items-center space-x-3\">\n                  <i className=\"fas fa-trophy text-yellow-500 text-lg\"></i>\n                  <span className=\"font-medium\">Badge Master</span>\n                </div>\n                <i className={stats.completionRate >= 50 ? \"fas fa-check text-success\" : \"fas fa-lock text-muted-foreground\"}></i>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Detailed Progress by Graduate Profile */}\n        <div className=\"space-y-8\">\n          {Object.entries(GRADUATE_PROFILE_LABELS).map(([profile, label]) => {\n            const profileApplications = applicationsByProfile[profile] || [];\n            const profileBadges = badgesByProfile[profile] || [];\n            const earnedCount = profileApplications.filter(app => app.status === 'earned').length;\n            const totalCount = profileBadges.length;\n            const percentage = totalCount > 0 ? Math.round((earnedCount / totalCount) * 100) : 0;\n\n            return (\n              <div key={profile} className=\"bg-card p-6 rounded-lg border border-border\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-bold\" data-testid={`profile-section-${profile}`}>{label}</h3>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {earnedCount}/{totalCount} badges ({percentage}%)\n                  </div>\n                </div>\n                \n                <Progress value={percentage} className=\"mb-6\" />\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {profileBadges.map((badge) => {\n                    const application = profileApplications.find(app => app.badgeId === badge.id);\n                    return (\n                      <div key={badge.id} className=\"p-4 border border-border rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium\" data-testid={`badge-name-${badge.id}`}>{badge.name}</h4>\n                          {application && (\n                            <i className={`${getStatusIcon(application.status)} ${getStatusColor(application.status)}`}></i>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-3\" data-testid={`badge-description-${badge.id}`}>\n                          {badge.description}\n                        </p>\n                        {application ? (\n                          <div className=\"text-xs text-muted-foreground\">\n                            Status: <span className={getStatusColor(application.status)} data-testid={`badge-status-${badge.id}`}>\n                              {application.status.replace('_', ' ').toUpperCase()}\n                            </span>\n                          </div>\n                        ) : (\n                          <div className=\"text-xs text-muted-foreground\" data-testid={`badge-status-${badge.id}`}>\n                            Not started\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":8220},"client/src/types/index.ts":{"content":"export interface UserStats {\n  earnedBadges: number;\n  inProgress: number;\n  totalBadges: number;\n  completionRate: number;\n}\n\nexport interface GraduateProfileProgress {\n  profile: string;\n  earnedCount: number;\n  totalCount: number;\n  percentage: number;\n}\n\nexport interface RecentActivity {\n  id: string;\n  type: 'badge_earned' | 'evidence_submitted' | 'application_started';\n  title: string;\n  timestamp: string;\n  badgeId?: string;\n  applicationId?: string;\n}\n\nexport const GRADUATE_PROFILE_LABELS: Record<string, string> = {\n  excellence: 'Excellence',\n  innovation: 'Innovation',\n  integrity: 'Integrity',\n  inspiration: 'Inspiration',\n  hauora: 'Hauora (Wellbeing)',\n  relationships: 'Relationships'\n};\n\nexport const GRADUATE_PROFILE_ICONS: Record<string, string> = {\n  excellence: 'fas fa-trophy',\n  innovation: 'fas fa-lightbulb',\n  integrity: 'fas fa-shield-alt',\n  inspiration: 'fas fa-star',\n  hauora: 'fas fa-heart',\n  relationships: 'fas fa-users'\n};\n\nexport const BADGE_STATUS_LABELS: Record<string, string> = {\n  not_started: 'Not Started',\n  in_progress: 'In Progress',\n  submitted: 'Submitted',\n  in_review: 'In Review',\n  earned: 'Earned',\n  rejected: 'Rejected'\n};\n\nexport const EVIDENCE_TYPE_LABELS: Record<string, string> = {\n  written_reflection: 'Written Reflection',\n  file_upload: 'File Upload',\n  project_link: 'Project Link',\n  video_submission: 'Video Submission'\n};\n","size_bytes":1396},"client/src/components/badge/badge-card.tsx":{"content":"import { Badge, BadgeApplication } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BADGE_STATUS_LABELS, GRADUATE_PROFILE_ICONS } from \"@/types\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BadgeCardProps {\n  badge: Badge;\n  application?: BadgeApplication & { evidence: any[] };\n  onStartApplication?: () => void;\n  onContinueApplication?: () => void;\n  onViewApplication?: () => void;\n}\n\nexport default function BadgeCard({ \n  badge, \n  application, \n  onStartApplication, \n  onContinueApplication, \n  onViewApplication \n}: BadgeCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'earned':\n        return 'bg-success/10 text-success';\n      case 'in_review':\n      case 'submitted':\n        return 'bg-warning/10 text-warning';\n      case 'in_progress':\n        return 'bg-primary/10 text-primary';\n      default:\n        return 'bg-muted/50 text-muted-foreground';\n    }\n  };\n\n  const getProgressPercentage = () => {\n    if (!application) return 0;\n    const submitted = application.evidence?.length || 0;\n    return Math.round((submitted / badge.requiredEvidenceCount) * 100);\n  };\n\n  const getActionButton = () => {\n    if (!application) {\n      return (\n        <Button \n          onClick={onStartApplication}\n          variant=\"outline\"\n          className=\"w-full\"\n          data-testid={`button-start-${badge.id}`}\n        >\n          Start Application\n        </Button>\n      );\n    }\n\n    switch (application.status) {\n      case 'in_progress':\n        return (\n          <Button \n            onClick={onContinueApplication}\n            className=\"w-full\"\n            data-testid={`button-continue-${badge.id}`}\n          >\n            Continue Application\n          </Button>\n        );\n      case 'submitted':\n      case 'in_review':\n      case 'earned':\n        return (\n          <Button \n            onClick={onViewApplication}\n            variant=\"outline\"\n            className=\"w-full\"\n            data-testid={`button-view-${badge.id}`}\n          >\n            View Application\n          </Button>\n        );\n      default:\n        return (\n          <Button \n            onClick={onStartApplication}\n            variant=\"outline\"\n            className=\"w-full\"\n            data-testid={`button-start-${badge.id}`}\n          >\n            Start Application\n          </Button>\n        );\n    }\n  };\n\n  return (\n    <div className=\"bg-card p-6 rounded-lg border border-border hover:shadow-lg transition-shadow\">\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className={cn(\n          \"w-12 h-12 rounded-lg flex items-center justify-center\",\n          `graduate-profile-${badge.graduateProfile}`\n        )}>\n          <i className={`${GRADUATE_PROFILE_ICONS[badge.graduateProfile]} text-xl`}></i>\n        </div>\n        {application && (\n          <span className={cn(\n            \"px-2 py-1 text-xs font-medium rounded-full\",\n            getStatusColor(application.status)\n          )} data-testid={`status-${badge.id}`}>\n            {BADGE_STATUS_LABELS[application.status]}\n          </span>\n        )}\n      </div>\n      \n      <h3 className=\"font-semibold mb-2\" data-testid={`badge-name-${badge.id}`}>\n        {badge.name}\n      </h3>\n      <p className=\"text-muted-foreground text-sm mb-4\" data-testid={`badge-description-${badge.id}`}>\n        {badge.description}\n      </p>\n      \n      {application && (\n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span>Evidence Submitted</span>\n            <span className=\"font-medium\" data-testid={`evidence-count-${badge.id}`}>\n              {application.evidence?.length || 0}/{badge.requiredEvidenceCount}\n            </span>\n          </div>\n          <Progress \n            value={getProgressPercentage()} \n            className=\"w-full\" \n            data-testid={`progress-${badge.id}`}\n          />\n        </div>\n      )}\n      \n      {getActionButton()}\n    </div>\n  );\n}\n","size_bytes":4079},"client/src/components/badge/evidence-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface EvidenceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  badges: Badge[];\n  selectedBadgeId?: string;\n  applicationId?: string;\n}\n\nexport default function EvidenceModal({ \n  isOpen, \n  onClose, \n  badges, \n  selectedBadgeId,\n  applicationId \n}: EvidenceModalProps) {\n  const [formData, setFormData] = useState({\n    badgeId: selectedBadgeId || '',\n    type: 'written_reflection',\n    title: '',\n    description: '',\n    content: '',\n    file: null as File | null\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const submitEvidenceMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await apiRequest('POST', '/api/evidence', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Evidence submitted successfully\",\n        description: \"Your evidence has been added to the application.\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      onClose();\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Error submitting evidence\",\n        description: \"Please try again later.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      badgeId: selectedBadgeId || '',\n      type: 'written_reflection',\n      title: '',\n      description: '',\n      content: '',\n      file: null\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!applicationId) {\n      toast({\n        title: \"Error\",\n        description: \"No application selected.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const formDataToSubmit = new FormData();\n    formDataToSubmit.append('applicationId', applicationId);\n    formDataToSubmit.append('type', formData.type);\n    formDataToSubmit.append('title', formData.title);\n    formDataToSubmit.append('description', formData.description);\n    \n    if (formData.type === 'written_reflection' && formData.content) {\n      formDataToSubmit.append('content', formData.content);\n    }\n    \n    if (formData.file) {\n      formDataToSubmit.append('file', formData.file);\n    }\n\n    submitEvidenceMutation.mutate(formDataToSubmit);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"evidence-modal-title\">Submit Evidence</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"badge-select\">Select Badge</Label>\n            <Select \n              value={formData.badgeId} \n              onValueChange={(value) => setFormData(prev => ({ ...prev, badgeId: value }))}\n              disabled={!!selectedBadgeId}\n            >\n              <SelectTrigger data-testid=\"select-badge\">\n                <SelectValue placeholder=\"Choose a badge\" />\n              </SelectTrigger>\n              <SelectContent>\n                {badges.map((badge) => (\n                  <SelectItem key={badge.id} value={badge.id}>\n                    {badge.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"evidence-type\">Evidence Type</Label>\n            <div className=\"grid grid-cols-2 gap-3 mt-2\">\n              <button\n                type=\"button\"\n                onClick={() => setFormData(prev => ({ ...prev, type: 'written_reflection' }))}\n                className={`p-4 border border-border rounded-lg text-left hover:bg-muted transition-colors ${\n                  formData.type === 'written_reflection' ? 'bg-accent' : ''\n                }`}\n                data-testid=\"button-written-reflection\"\n              >\n                <i className=\"fas fa-file-alt text-primary mb-2\"></i>\n                <div className=\"font-medium\">Written Reflection</div>\n                <div className=\"text-sm text-muted-foreground\">Document your learning journey</div>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setFormData(prev => ({ ...prev, type: 'file_upload' }))}\n                className={`p-4 border border-border rounded-lg text-left hover:bg-muted transition-colors ${\n                  formData.type === 'file_upload' ? 'bg-accent' : ''\n                }`}\n                data-testid=\"button-file-upload\"\n              >\n                <i className=\"fas fa-upload text-primary mb-2\"></i>\n                <div className=\"font-medium\">File Upload</div>\n                <div className=\"text-sm text-muted-foreground\">Photos, videos, documents</div>\n              </button>\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"title\">Evidence Title</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              placeholder=\"Give your evidence a descriptive title\"\n              required\n              data-testid=\"input-title\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">Evidence Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Describe your evidence and how it demonstrates the badge criteria...\"\n              rows={4}\n              required\n              data-testid=\"textarea-description\"\n            />\n          </div>\n\n          {formData.type === 'written_reflection' && (\n            <div>\n              <Label htmlFor=\"content\">Written Reflection</Label>\n              <Textarea\n                id=\"content\"\n                value={formData.content}\n                onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n                placeholder=\"Write your reflection here...\"\n                rows={6}\n                data-testid=\"textarea-content\"\n              />\n            </div>\n          )}\n\n          {formData.type === 'file_upload' && (\n            <div>\n              <Label htmlFor=\"file\">Upload File</Label>\n              <div className=\"border-2 border-dashed border-border rounded-lg p-8 text-center\">\n                <i className=\"fas fa-cloud-upload-alt text-4xl text-muted-foreground mb-4\"></i>\n                <div className=\"font-medium mb-2\">Drop files here or click to upload</div>\n                <div className=\"text-sm text-muted-foreground\">Supports images, videos, documents (max 10MB)</div>\n                <Input\n                  id=\"file\"\n                  type=\"file\"\n                  onChange={(e) => setFormData(prev => ({ ...prev, file: e.target.files?.[0] || null }))}\n                  className=\"mt-4\"\n                  accept=\"image/*,video/*,.pdf,.doc,.docx,.txt\"\n                  data-testid=\"input-file\"\n                />\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              onClick={onClose}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={submitEvidenceMutation.isPending}\n              data-testid=\"button-submit-evidence\"\n            >\n              {submitEvidenceMutation.isPending ? \"Submitting...\" : \"Submit Evidence\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8464},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\ninterface HeaderProps {\n  title: string;\n  description: string;\n  onSubmitEvidence?: () => void;\n}\n\nexport default function Header({ title, description, onSubmitEvidence }: HeaderProps) {\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\" data-testid=\"header-title\">{title}</h1>\n          <p className=\"text-muted-foreground\" data-testid=\"header-description\">{description}</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative\">\n            <button \n              className=\"p-2 text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"button-notifications\"\n            >\n              <i className=\"fas fa-bell text-lg\"></i>\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-warning rounded-full\"></span>\n            </button>\n          </div>\n          {onSubmitEvidence && (\n            <Button \n              onClick={onSubmitEvidence}\n              data-testid=\"button-submit-evidence\"\n            >\n              Submit Evidence\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1316},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: \"fas fa-tachometer-alt\" },\n  { name: \"Badge Catalog\", href: \"/badges\", icon: \"fas fa-medal\" },\n  { name: \"Badge Builder\", href: \"/badge-builder\", icon: \"fas fa-magic\" },\n  { name: \"My Evidence\", href: \"/evidence\", icon: \"fas fa-folder-open\" },\n  { name: \"Progress\", href: \"/progress\", icon: \"fas fa-chart-line\" },\n  { name: \"Profile\", href: \"/profile\", icon: \"fas fa-user\" },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border flex-shrink-0 flex flex-col\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center text-primary-foreground font-bold text-lg\">\n            OJC\n          </div>\n          <div>\n            <h1 className=\"font-semibold text-lg\">Badge System</h1>\n            <p className=\"text-muted-foreground text-sm\">Student Portal</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"p-4 space-y-2 flex-1\">\n        {navigation.map((item) => {\n          const isActive = location === item.href;\n          return (\n            <Link key={item.name} href={item.href}>\n              <a\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-lg font-medium transition-colors\",\n                  isActive\n                    ? \"bg-accent text-accent-foreground\"\n                    : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                )}\n                data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n              >\n                <i className={`${item.icon} w-5`}></i>\n                <span>{item.name}</span>\n              </a>\n            </Link>\n          );\n        })}\n      </nav>\n\n      <div className=\"p-4\">\n        <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg\">\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-medium\">\n            JD\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium truncate\">John Doe</p>\n            <p className=\"text-xs text-muted-foreground truncate\">Student</p>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2523},"client/src/components/progress/graduate-profile-progress.tsx":{"content":"import { GraduateProfileProgress, GRADUATE_PROFILE_LABELS } from \"@/types\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface GraduateProfileProgressProps {\n  progress: GraduateProfileProgress[];\n}\n\nexport default function GraduateProfileProgressComponent({ progress }: GraduateProfileProgressProps) {\n  return (\n    <div className=\"bg-card p-6 rounded-lg border border-border\">\n      <h2 className=\"text-xl font-bold mb-6\" data-testid=\"graduate-profile-title\">Graduate Profile Progress</h2>\n      <div className=\"space-y-6\">\n        {progress.map((item) => (\n          <div key={item.profile} className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-medium\" data-testid={`profile-name-${item.profile}`}>\n                {GRADUATE_PROFILE_LABELS[item.profile]}\n              </h3>\n              <span className=\"text-sm text-muted-foreground\" data-testid={`profile-count-${item.profile}`}>\n                {item.earnedCount}/{item.totalCount} badges\n              </span>\n            </div>\n            <Progress \n              value={item.percentage} \n              className=\"w-full\" \n              data-testid={`progress-bar-${item.profile}`}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1299},"client/src/components/stats/stats-overview.tsx":{"content":"import { UserStats } from \"@/types\";\n\ninterface StatsOverviewProps {\n  stats: UserStats;\n}\n\nexport default function StatsOverview({ stats }: StatsOverviewProps) {\n  const statItems = [\n    {\n      label: \"Badges Earned\",\n      value: stats.earnedBadges.toString(),\n      icon: \"fas fa-trophy\",\n      color: \"text-success\",\n      bgColor: \"bg-success/10\"\n    },\n    {\n      label: \"In Progress\",\n      value: stats.inProgress.toString(),\n      icon: \"fas fa-clock\",\n      color: \"text-warning\",\n      bgColor: \"bg-warning/10\"\n    },\n    {\n      label: \"Total Available\",\n      value: stats.totalBadges.toString(),\n      icon: \"fas fa-medal\",\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\"\n    },\n    {\n      label: \"Completion Rate\",\n      value: `${stats.completionRate}%`,\n      icon: \"fas fa-percentage\",\n      color: \"text-secondary\",\n      bgColor: \"bg-secondary/10\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {statItems.map((item, index) => (\n        <div key={index} className=\"bg-card p-6 rounded-lg border border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-muted-foreground text-sm font-medium\" data-testid={`stat-label-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n                {item.label}\n              </p>\n              <p className={`text-3xl font-bold ${item.color}`} data-testid={`stat-value-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n                {item.value}\n              </p>\n            </div>\n            <div className={`w-12 h-12 ${item.bgColor} rounded-lg flex items-center justify-center`}>\n              <i className={`${item.icon} ${item.color} text-xl`}></i>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1845},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}